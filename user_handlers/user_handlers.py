from random import choice
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext, filters
from .user_states import ForUserHandlers
from .user_keyboards import get_topics_keyboard, get_choice_keyboard, user_words_menu
from .user_functions import main, get_words_by_group
from commands_handlers.commands_keyboards import test_keyboard, get_levels_keyboard


async def chose_topic(message: types.Message):
    data = get_topics_keyboard(message.text)
    topic_keyboard = data['topics_keyboard']
    await message.answer(text='–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É', reply_markup=topic_keyboard)
    await message.delete()


async def show_verbs(message: types.Message):
    verbs = await main('https://romamarchukov.pythonanywhere.com/api/verbs')
    await message.answer(verbs['results'][0:25])
    await message.answer(verbs['results'][25:50])
    await message.answer(verbs['results'][50:75])
    await message.answer(verbs['results'][75:100])
    await message.delete()


async def user_words(message: types.Message):
    await message.answer(text='choose action with your words', reply_markup=user_words_menu)
    await message.delete()


async def show_user_words(message: types.Message):
    words = await main('https://romamarchukov.pythonanywhere.com/api/user-words/')
    await message.answer(f'{words["results"][0:25]}')
    await message.answer(f'{words["results"][25:50]}')
    await message.answer(f'{words["results"][50:75]}')
    await message.answer(f'{words["results"][75:100]}')
    await message.delete()


async def add_user_words(message: types.Message):
    await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ–π –º–æ–≤—ñ')
    await ForUserHandlers.english_word.set()
    await message.delete()


async def add_english_word(message: types.Message, state: FSMContext):
    english_word = message.text.lower()
    await state.update_data(english_word=english_word)
    await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª–æ–≤–∞')
    await ForUserHandlers.ukraine_word.set()


async def add_ukraine_word(message: types.Message, state: FSMContext):
    ukraine_word = message.text.lower()
    await state.update_data(ukraine_word=ukraine_word)
    data = await state.get_data()
    request_data = {'english_word': data['english_word'], 'ukraine_word': data['ukraine_word']}
    await main('https://romamarchukov.pythonanywhere.com/api/user-words/', data=request_data)
    await message.answer(f'<b>{data.get("english_word")}  &#9824  {data.get("ukraine_word")}</b> - '
                         f'–¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –≤–∞—à–∏—Ö —Å–ª—ñ–≤', parse_mode='HTML')
    await state.reset_state(with_data=False)


async def show_tests(message: types.Message, state: FSMContext):
    await ForUserHandlers.words_group.set()
    await message.answer(text='choose test', reply_markup=test_keyboard)
    if message.text == '–û—Å–Ω–æ–≤–Ω—ñ —Å–ª–æ–≤–∞':
        await state.update_data(key='main_words', english_key='in_english', ukraine_key='in_ukrainian')
    elif message.text == '–û—Å–æ–±–∏—Å—Ç—ñ —Å–ª–æ–≤–∞' or message.text == '—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Å–æ–±–∏—Å—Ç–∏—Ö —Å–ª—ñ–≤':
        await state.update_data(key='user_words', english_key='english_word', ukraine_key='ukraine_word')
    await ForUserHandlers.word.set()
    await message.delete()


async def tests(message: types.Message, state: FSMContext):
    keys = await state.get_data()
    if message.text == '/menu':
        await state.reset_state(with_data=False)
        await message.answer('–æ–±–µ—Ä—ñ—Ç—å', reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True,
                                                                               one_time_keyboard=True).add('üí¨–ú–µ–Ω—é'))
    else:
        words = await get_words_by_group(keys['key'])
        all_words = words['results']
        random_word = choice(all_words)
        if message.text == '–ø–µ—Ä–µ–∫–ª–∞–¥ –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó':
            random_word_in_english = random_word.get(keys['english_key'])
            await message.answer(text=f'–ü–µ—Ä–µ–∫–ª–∞–¥—ñ—Ç—å —Å–ª–æ–≤–æ - <b>{random_word_in_english}</b>', parse_mode='HTML')
        elif message.text == '–ø–µ—Ä–µ–∫–ª–∞–¥ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó':
            random_word_in_ukrainian = random_word[keys['ukraine_key']]
            await message.answer(text=f'–ü–µ—Ä–µ–∫–ª–∞–¥—ñ—Ç—å —Å–ª–æ–≤–æ - <b>{random_word_in_ukrainian}</b>', parse_mode='HTML')
        elif message.text == '–≤–∏–±—ñ—Ä –∑ –∞–Ω–≥–ª—ñ–π—Å–∫–æ—ó':
            random_word_in_english = random_word[keys['english_key']]
            random_word_in_ukrainian = random_word[keys['ukraine_key']]
            keyboard = await get_choice_keyboard(keys['ukraine_key'], words)
            keyboard.insert(
                types.InlineKeyboardButton(text=random_word_in_ukrainian, callback_data=random_word_in_ukrainian))
            await message.answer(text=f'–ü–µ—Ä–µ–∫–ª–∞–¥—ñ—Ç—å —Å–ª–æ–≤–æ - <b>{random_word_in_english}</b>', parse_mode='HTML',
                                 reply_markup=keyboard)
        elif message.text == '–≤–∏–±—ñ—Ä –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó':
            random_word_in_ukrainian = random_word[keys['ukraine_key']]
            random_word_in_english = random_word[keys['english_key']]
            keyboard = await get_choice_keyboard(keys['english_key'], words)
            keyboard.insert(
                types.InlineKeyboardButton(text=random_word_in_english, callback_data=random_word_in_english))
            await message.answer(text=f'–ü–µ—Ä–µ–∫–ª–∞–¥—ñ—Ç—å —Å–ª–æ–≤–æ - <b>{random_word_in_ukrainian}</b>', parse_mode='HTML',
                                 reply_markup=keyboard)
        await state.update_data(word=random_word)
        await ForUserHandlers.answer.set()
        await message.delete()


async def get_choice(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    ask_word = data['word']
    if callback.data == ask_word[data['english_key']]:
        await callback.answer('–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞!', show_alert=True)
        await callback.message.answer(text=f'–°–ª–æ–≤–æ - <b>{ask_word[data["ukraine_key"]]}</b>.\n'
                                           f'–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - <b>{callback.data}</b>',
                                      parse_mode='HTML')
    elif callback.data == ask_word[data['ukraine_key']]:
        await callback.answer('–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞!', show_alert=True)
        await callback.message.answer(text=f'–°–ª–æ–≤–æ - <b>{ask_word[data["english_key"]]}</b>.\n'
                                           f'–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - <b>{callback.data}</b>',
                                      parse_mode='HTML')
    else:
        await callback.answer('–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞', show_alert=True)
        await callback.message.answer(text=f'–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:  <b>{ask_word[data["english_key"]]}</b>'
                                           f'  &#9824  <b>{ask_word[data["ukraine_key"]]}</b>',
                                      parse_mode='HTML')

    await state.reset_state(with_data=False)


async def get_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    ask_word = data['word']
    if message.text.lower() == ask_word[data['english_key']]:
        await message.answer(text=f'–°–ª–æ–≤–æ - <b>{ask_word[data["ukraine_key"]]}</b>.\n'
                                  f'–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - <b>{message.text}</b> - –ø—Ä–∞–≤–∏–ª—å–Ω–∞!', parse_mode='HTML')
    elif message.text.lower() == ask_word[data['ukraine_key']]:
        await message.answer(text=f'–°–ª–æ–≤–æ - <b>{ask_word[data["english_key"]]}</b>.\n'
                                  f'–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - <b>{message.text}</b> - –ø—Ä–∞–≤–∏–ª—å–Ω–∞!', parse_mode='HTML')
    else:
        await message.answer(text=f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞.\n'
                                  f'–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:  <b>{ask_word[data["english_key"]]}</b>'
                                  f'  &#9824  <b>{ask_word[data["ukraine_key"]]}</b>',
                             parse_mode='HTML')
    await state.reset_state(with_data=False)


async def show_words(message: types.Message):
    param = message.text
    words = await main(url=f'https://romamarchukov.pythonanywhere.com/api/words/topic/{param}')
    # for word in words['results']:
    #     await message.answer(f'<b>{word["in_english"]}</b>  &#9824  <b>{word["in_ukrainian"]}</b>', parse_mode='HTML')
    await message.answer(f'{words["results"][0:25]}')
    await message.answer(f'{words["results"][25:50]}')
    await message.answer(f'{words["results"][50:75]}')
    await message.answer(f'{words["results"][75:100]}')


def register_user_handlers(dp: Dispatcher):
    dp.register_message_handler(chose_topic, filters.Text(equals=get_levels_keyboard()['level_filter'],
                                                          ignore_case=True))
    dp.register_message_handler(show_verbs, filters.Text(equals='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥—ñ—î—Å–ª–æ–≤–∞', ignore_case=True))
    dp.register_message_handler(user_words, filters.Text(equals='–û—Å–æ–±–∏—Å—Ç—ñ —Å–ª–æ–≤–∞', ignore_case=True))
    dp.register_message_handler(show_user_words, filters.Text(equals='–ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–≤–æ—ó —Å–ª–æ–≤–∞', ignore_case=True))
    dp.register_message_handler(add_user_words, filters.Text(equals='–¥–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ', ignore_case=True))
    dp.register_message_handler(add_english_word, state=ForUserHandlers.english_word)
    dp.register_message_handler(add_ukraine_word, state=ForUserHandlers.ukraine_word)
    dp.register_message_handler(show_tests, filters.Text(equals=['–æ—Å–æ–±–∏—Å—Ç—ñ —Å–ª–æ–≤–∞',
                                                                 '–æ—Å–Ω–æ–≤–Ω—ñ —Å–ª–æ–≤–∞',
                                                                 '—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Å–æ–±–∏—Å—Ç–∏—Ö —Å–ª—ñ–≤'],
                                                         ignore_case=True))
    dp.register_message_handler(tests, state=ForUserHandlers.word)
    dp.register_callback_query_handler(get_choice, state=ForUserHandlers.answer)
    dp.register_message_handler(get_answer, state=ForUserHandlers.answer)
    dp.register_message_handler(show_words, filters.Text(equals=get_topics_keyboard()['topic_filter'],
                                                         ignore_case=True))
